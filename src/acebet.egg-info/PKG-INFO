Metadata-Version: 2.2
Name: acebet
Version: 0.0.2
Summary: Oracle of the Tennis Champion, mock-up of a bet prediction app
Author-email: Thomas Bury <bury.thomas@gmail.com>
Keywords: tennis,bet,prediction,oracle,sportbet
Classifier: Programming Language :: Python :: 3
Requires-Python: <3.13,>=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: bcrypt>=4.2.0
Requires-Dist: fastapi[standard]>=0.115.0
Requires-Dist: joblib>=1.4.2
Requires-Dist: lightgbm>=3.3.1
Requires-Dist: matplotlib>=3.9.2
Requires-Dist: numpy>=2.1.2
Requires-Dist: pandas>=2.2.3
Requires-Dist: passlib>=1.7.4
Requires-Dist: pyarrow>=17.0.0
Requires-Dist: pydantic>=2.9.2
Requires-Dist: python-jose[cryptography]>=3.3.0
Requires-Dist: python-multipart>=0.0.12
Requires-Dist: scikit-learn>=1.5.0
Requires-Dist: slowapi>=0.1.9

# Mastering MLOps with UV: A Practical Guide Using AceBet

Ease and speed up your MLOps workflows with efficient dependency management and deployment strategies.*



## Introduction

In the evolving landscape of Machine Learning Operations (MLOps), efficient **dependency management** and **reproducibility** are paramount. Traditional tools like `pip` and `virtualenv` often fall short, leading to challenges in maintaining consistent environments. Enter **UV**, an ultra-fast Python package and project manager designed to address these issues head-on.

In this guide, we'll explore how UV can enhance your MLOps workflows using **AceBet**, a mock-up tennis match predictor application, as a practical example.

---

## What is UV?

**UV** is a modern Python package and project manager that offers:

- **Speed**: Significantly faster installations compared to traditional tools.
- **Reproducibility**: Robust lockfile support ensures consistent environments.
- **Comprehensive Management**: Handles everything from Python version management to project initialization and dependency handling.

For more details, refer to the [official UV documentation](https://docs.astral.sh/uv/).

---

## Introducing AceBet

**AceBet** is a mock-up application designed to predict tennis match outcomes. Built with **FastAPI**, it serves as an excellent case study to demonstrate MLOps concepts, including:

- **Dependency Management**: Handling libraries and packages efficiently.
- **Environment Setup**: Creating isolated and reproducible environments.
- **Deployment**: Streamlining the process from development to production.

---

## Setting Up AceBet with UV

### 1. Installing UV

UV offers multiple installation methods. Choose the one that best fits your system:

**Standalone Installer**:

For macOS and Linux:

```bash
curl -LsSf https://astral.sh/uv/install.sh | sh
```

For Windows:

```powershell
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
```

**Alternative Methods**:

- **Homebrew** (macOS):

  ```bash
  brew install uv
  ```

- **pip**:

  ```bash
  pip install uv
  ```

For more installation options, refer to the [UV installation guide](https://docs.astral.sh/uv/getting-started/installation/).

### 2. Initializing the AceBet Project

Navigate to your desired directory and initialize a new UV project:

```bash
uv init acebet
cd acebet
```

This command sets up a new project with the following structure:

```
acebet/
├── .python-version
├── pyproject.toml
├── README.md
└── main.py
```

### 3. Managing Dependencies

Add necessary dependencies for AceBet:

```bash
uv add fastapi uvicorn lightgbm joblib
```

This command updates your `pyproject.toml` and installs the specified packages.

### 4. Setting Up the Development Environment

UV automatically creates a virtual environment for your project. To activate it:

For macOS/Linux:

```bash
source .venv/bin/activate
```

For Windows:

```powershell
.venv\Scripts\activate
```

### 5. Running the Application

With the environment set up, you can run the AceBet application:

```bash
uv run uvicorn main:app --reload
```

This command starts the FastAPI server, and you can access the application in your browser.

---

## Enhancing MLOps Workflows with UV

### Reproducibility with Lockfiles

To ensure consistent environments across different setups:

```bash
uv lock
```

This generates a `uv.lock` file, capturing the exact versions of your dependencies. To synchronize another environment with this setup:

```bash
uv sync
```

### Version Control and Collaboration

By committing the `pyproject.toml` and `uv.lock` files to your version control system, collaborators can replicate the environment effortlessly:

```bash
uv sync
```

This command reads the lockfile and installs the exact dependencies, ensuring consistency across all development environments.

### Deployment Optimization

For deploying AceBet, UV streamlines the process:

1. **Building the Project**:

   ```bash
   uv build
   ```

   This creates distributable packages in the `dist/` directory.

2. **Publishing the Package**:

   ```bash
   uv publish --token YOUR_PYPI_TOKEN
   ```

   Replace `YOUR_PYPI_TOKEN` with your actual PyPI token. This command uploads your package to the Python Package Index or any other specified repository.

For detailed instructions, refer to the [UV packaging guide](https://docs.astral.sh/uv/guides/package/).

---

## Conclusion

Integrating **UV** into your MLOps workflows offers a robust solution for managing dependencies, ensuring reproducibility, and streamlining deployment processes. By adopting UV, teams can focus more on developing innovative machine learning solutions and less on the intricacies of environment management.

For further reading and advanced features, explore the [official UV documentation](https://docs.astral.sh/uv/).

---

*Note: This article is part of the "Mastering Python Project Management with UV" series. Be sure to check out the previous installments for a comprehensive understanding.*

--- 
